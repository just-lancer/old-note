package knowledge;

public class Shell {
    /**
     *  Shell脚本语言
     *  一、概述
     *  1、概念
     *      Shell时一个命令解释其，接受应用程序/用户命令，然后调用操作系统内核
     *      Shell特点：功能强大、易编写、易调试、灵活性强
     *      应用程序和用户命令不能直接调用系统内核，因为无法被识别
     *
     *  2、为什么要学习Shell？
     *      ① 在工作中需要读懂运维人员编写的Shell脚本
     *      ② 工作中偶尔也需要编写一些简单的Shell程序来管理集群、提高开发效率
     *
     *  3、Shell解析器
     *      在/etc/shells文件中存放着Linux系统提供的shell解析器
     *      /bin/sh
     *      /bin/bash
     *      /sbin/nologin
     *      /bin/dash
     *      /bin/tcsh
     *      /bin/csh
     *      其中/bin/sh是/bin/bash的软链接
     *      Linux默认的shell解析器/bin/bash
     *
     *  二、Shell脚本入门
     *      1、编写shell脚本格式：
     *          脚本文件格式：以.sh结尾，表示可执行脚本
     *          脚本内容以：#/bin/bash 开头，用以指定解析器
     *
     *      2、shell脚本执行格式：
     *          ① 采用bash(或sh) + 脚本的相对路径或绝对路径，执行脚本
     *              如：bash ./tomdate/bash.sh
     *
     *          ② 采用输入脚本的绝对路径或相对路径执行脚本
     *              说明：该方法能使用的前提是：当前用户对.sh脚本文件必须具有执行权限(x)
     *
     *          注意：第一种执行方法，本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限。
     *              第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。
     *
     *      3、多命令处理：
     *          shell脚本就是将多个Linux命令按一定的格式写在一个.sh文件中
     *
     *  三、Shell中的变量
     *      1、系统变量：
     *          $HOME   当前用户的家目录
     *          $PWD    当前用户所处的位置
     *          $SHELL  当前使用的Shell解释器
     *          $USER   当前用户
     *
     *      2。自定义变量
     *          ① 定义变量：变量名=变量值  注意：不能空格
     *          ② 撤销变量：unset 变量名
     *          ③ 声明静态常量：readonly 变量
     *          举例：
     *              定义变量：A=3
     *              获取变量值：$A 现在这个符号代表3
     *          说明：
     *              > 变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。
     *              > 在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。但是在运算表达式中可以自动类型转换
     *              > 变量的值如果有空格，需要使用双引号或单引号括起来。
     *
     *          补充：
     *              > 将局部变量提升为全局变量：export 变量名
     *                  例如：
     *                      A=3
     *                      export B
     *              > 静态变量无法撤销，当重启系统会消失
     *
     *      3、特殊变量：
     *          $n：n为数字，n >= 0。$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}
     *          $*：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体
     *          $@：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待
     *          $#：获取所有输入参数个数，常用于循环
     *          $?：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；
     *              如果这个变量的值为非0，则证明上一个命令执行不正确了。
     *
     *  四、运算符：
     *      1、运算表达式语法：
     *          ① $((运算式)) 或者 $[运算式] 运算式不需要添加其他符号
     *          ② expr 运算式
     *              说明：expr不适合计算带括号的运算，因为需要着重号'`'来充当小括号'('
     *                  例如：计算(2+3)*3，expr `expr 3 + 2` \* 3
     *          说明：①和②的区别在于，①的运算式对空格无要求，其次输出需要echo命令；
     *                              ②的运算式必须有空格，其输出不需要echo，若添加echo，则按字符串输出
     *      2、算数运算符：
     *          +、 -、 \*、 /、 %   加、减、乘、除、取余
     *          **  幂运算
     *          ++、--   自增、自减，可前置、可后置
     *
     *      3、比较运算符，同java
     *          ==、!=、<、<=、>、>=
     *
     *      4、逻辑运算符，同java
     *          !、||、&&
     *          取反、或、与
     *      说明：shell中，0表示true、非0表示false
     *
     *  五、条件判断
     *      语法格式：
     *          条件表达式：[ 条件判断表达式 ]  注意表达式前后要有空格
     *          注意：条件非空即为true，[ atguigu ]返回true，[] 返回false。
     *
     *      常用条件判断：
     *          1、数值之间的比较使用比较运算符
     *          2、根据文件权限判断：
     *              > -r 有读的权限（read）
     *              > -w 有写的权限（write）
     *              > -x 有执行的权限（execute）
     *              注意：执行结果需要利用$?命令查看
     *              如：[ -w bash.sh ]
     *                  $?
     *          3、根据文件类型判断
     *              > -f 文件存在并且是一个常规的文件（file）
     *              > -d 文件存在并是一个目录（directory）
     *              > -e 文件存在（existence）
     *              同样，结果需要利用$?命令获得
     *
     *  六、流程控制
     *      1、if条件判断
     *          语法格式：
     *          if [ 条件判断表达式 ]
     *              then
     *                  代码
     *          fi
     *          或
     *          if [ 条件判断表达式 ];then
     *              程序
     *          fi
     *          注意：if后面要有空格
     *
     *      2、case选择
     *          语法格式：
     *          case $变量名 in
     *              "值1")
     *                  代码1
     *                  ;;
     *              "值2")
     *                  代码2
     *                  ;;
     *
     *                  ...
     *
     *              *)
     *                  默认代码
     *                  ;;
     *          esac
     *          注意：
     *              1)	case行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。
     *              2)	双分号“;;”表示命令序列结束，相当于java中的break。
     *              3)	最后的“*）”表示默认模式，相当于java中的default。
     *
     *      3、for循环
     *          语法格式1：同java
     *              for (初始值; 循环条件; 循环迭代)
     *                  do
     *                      循环体
     *                  done
     *
     *          语法格式2：
     *              for 变量 in 值1,值2,值3....
     *                  do
     *                      循环体
     *                  done
     *
     *      4、while循环
     *          语法格式：
     *              while [条件判断式]
     *                  do
     *                      循环体
     *                  done
     *
     *  七、read读取控制台输入
     *      基本语法：read [parameter] 变量名
     *      可选参数：-t 指定输入等待时间（秒）
     *               -p 指定读取值时的提示符
     *      变量名，表示将读取的值存放在该变量中
     *
     *  八、函数
     *      1、系统函数：
     *          ① basename函数
     *          基本语法：basename string/filepath  [suffix/string]
     *          作用：用于获取路径中文件的名称及后缀名
     *          suffix为文件的后缀名，如果指定suffix，那么只获取文件名，删去后缀
     *
     *          ② dirname函数
     *          基本语法：dirname filepath
     *          filepath为文件的绝对路径
     *          作用：用于获取文件的绝对路径
     *
     *      2、自定义函数：
     *          基本语法：
     *          [function] funcname ([])
     *          {
     *              函数体
     *              [return int]
     *          }
     *          说明：
     *              > 必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先编译
     *              > 函数返回值，只能通过$?系统变量获得，可以显示加：return返回，如果不加，将以最后一条命令运行结果，作为返回值。
     *                  return后跟数值n(0-255)
     *
     *  九、Shell工具
     *      1、cut：用来从标准输入或文本文件中剪切列或域
     *          语法格式：cut [parameter] filename
     *          参数说明：
     *              -d 分隔符，指定分隔符，用于分割列
     *              -f <列号n> 结果提取第n列
     *
     *      2、sed
     *          简介：sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，
     *              接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。
     *              文件内容并没有改变，除非你使用重定向存储输出。
     *
     *          语法格式：sed [parameter] 编辑命令 文件
     *          可选参数：一般选用-e，表示直接在指令列模式上进行sed的动作编辑
     *          编辑命令说明：
     *              > a:追加  向匹配行后面插入内容
     *              > c:更改  更改匹配行的内容
     *              > i:插入  向匹配行前插入内容
     *              > d:删除  删除匹配的内容
     *              > s:替换  替换掉匹配的内容
     *              > p:打印  打印出匹配的内容，通常与-n选项和用
     *          命令编辑需要查资料，很麻烦
     *
     *      3、awk：一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。
     *
     *
     *      4、sort：对文件进行排序，并将排序结果标准输出
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     */
}
